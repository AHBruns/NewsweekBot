{"ast":null,"code":"import { credentials, endpoints, getPeristentVariablesQuery } from \"lib/constants\";\nimport https from \"https\";\n\nfunction respondToTweet(id) {\n  console.log(`RESPONDING TO ${id}`);\n}\n\nfunction respondToTweets(tweets, persistentVariables) {\n  if (tweets === undefined || persistentVariables === undefined) return;\n  console.log(tweets);\n  console.log(\"\\n\\n\\n\\n\\n\\n\\n\");\n  console.log(persistentVariables);\n}\n\nexport default ((req, res) => {\n  let persistentVariables = undefined;\n  let tweets = undefined;\n  let dbReq = https.request(endpoints.db, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Content-Length\": Buffer.byteLength(getPeristentVariablesQuery)\n    },\n    method: \"POST\"\n  }, dbRes => {\n    let body = \"\";\n    dbRes.on(\"data\", chunk => body += chunk);\n    dbRes.on(\"end\", () => {\n      persistentVariables = JSON.parse(body).data;\n      respondToTweets(tweets, persistentVariables);\n    });\n  });\n  dbReq.write(getPeristentVariablesQuery);\n  dbReq.end();\n  https.get(endpoints.twitter, {\n    headers: {\n      Authorization: `Bearer ${credentials.twitter.bearerToken}`\n    }\n  }, twitterRes => {\n    let body = \"\";\n    twitterRes.on(\"data\", chunk => body += chunk);\n    twitterRes.on(\"end\", () => {\n      tweets = JSON.parse(body).data;\n      respondToTweets(tweets, persistentVariables);\n    });\n  });\n});","map":{"version":3,"sources":["/Users/ahb/code/newsweek-twitter-bot/pages/api/index.ts"],"names":["credentials","endpoints","getPeristentVariablesQuery","https","respondToTweet","id","console","log","respondToTweets","tweets","persistentVariables","undefined","req","res","dbReq","request","db","headers","Buffer","byteLength","method","dbRes","body","on","chunk","JSON","parse","data","write","end","get","twitter","Authorization","bearerToken","twitterRes"],"mappings":"AACA,SACEA,WADF,EAEEC,SAFF,EAGEC,0BAHF,QAIO,eAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,cAAT,CAAwBC,EAAxB,EAA4B;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBF,EAAG,EAAhC;AACD;;AAED,SAASG,eAAT,CAAyBC,MAAzB,EAAiCC,mBAAjC,EAAsD;AACpD,MAAID,MAAM,KAAKE,SAAX,IAAwBD,mBAAmB,KAAKC,SAApD,EAA+D;AAC/DL,EAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYG,mBAAZ;AACD;;AAED,gBAAe,CAACE,GAAD,EAAsBC,GAAtB,KAA+C;AAC5D,MAAIH,mBAAmB,GAAGC,SAA1B;AACA,MAAIF,MAAM,GAAGE,SAAb;AAEA,MAAIG,KAAK,GAAGX,KAAK,CAACY,OAAN,CACVd,SAAS,CAACe,EADA,EAEV;AACEC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,wBAAkBC,MAAM,CAACC,UAAP,CAAkBjB,0BAAlB;AAFX,KADX;AAKEkB,IAAAA,MAAM,EAAE;AALV,GAFU,EASTC,KAAD,IAAW;AACT,QAAIC,IAAI,GAAG,EAAX;AACAD,IAAAA,KAAK,CAACE,EAAN,CAAS,MAAT,EAAkBC,KAAD,IAAYF,IAAI,IAAIE,KAArC;AACAH,IAAAA,KAAK,CAACE,EAAN,CAAS,KAAT,EAAgB,MAAM;AACpBb,MAAAA,mBAAmB,GAAGe,IAAI,CAACC,KAAL,CAAWJ,IAAX,EAAiBK,IAAvC;AACAnB,MAAAA,eAAe,CAACC,MAAD,EAASC,mBAAT,CAAf;AACD,KAHD;AAID,GAhBS,CAAZ;AAkBAI,EAAAA,KAAK,CAACc,KAAN,CAAY1B,0BAAZ;AACAY,EAAAA,KAAK,CAACe,GAAN;AAEA1B,EAAAA,KAAK,CAAC2B,GAAN,CACE7B,SAAS,CAAC8B,OADZ,EAEE;AACEd,IAAAA,OAAO,EAAE;AAAEe,MAAAA,aAAa,EAAG,UAAShC,WAAW,CAAC+B,OAAZ,CAAoBE,WAAY;AAA3D;AADX,GAFF,EAKGC,UAAD,IAAgB;AACd,QAAIZ,IAAI,GAAG,EAAX;AACAY,IAAAA,UAAU,CAACX,EAAX,CAAc,MAAd,EAAuBC,KAAD,IAAYF,IAAI,IAAIE,KAA1C;AACAU,IAAAA,UAAU,CAACX,EAAX,CAAc,KAAd,EAAqB,MAAM;AACzBd,MAAAA,MAAM,GAAGgB,IAAI,CAACC,KAAL,CAAWJ,IAAX,EAAiBK,IAA1B;AACAnB,MAAAA,eAAe,CAACC,MAAD,EAASC,mBAAT,CAAf;AACD,KAHD;AAID,GAZH;AAcD,CAvCD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport {\n  credentials,\n  endpoints,\n  getPeristentVariablesQuery,\n} from \"lib/constants\";\nimport https from \"https\";\n\nfunction respondToTweet(id) {\n  console.log(`RESPONDING TO ${id}`);\n}\n\nfunction respondToTweets(tweets, persistentVariables) {\n  if (tweets === undefined || persistentVariables === undefined) return;\n  console.log(tweets);\n  console.log(\"\\n\\n\\n\\n\\n\\n\\n\");\n  console.log(persistentVariables);\n}\n\nexport default (req: NextApiRequest, res: NextApiResponse) => {\n  let persistentVariables = undefined;\n  let tweets = undefined;\n\n  let dbReq = https.request(\n    endpoints.db,\n    {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": Buffer.byteLength(getPeristentVariablesQuery),\n      },\n      method: \"POST\",\n    },\n    (dbRes) => {\n      let body = \"\";\n      dbRes.on(\"data\", (chunk) => (body += chunk));\n      dbRes.on(\"end\", () => {\n        persistentVariables = JSON.parse(body).data;\n        respondToTweets(tweets, persistentVariables);\n      });\n    }\n  );\n  dbReq.write(getPeristentVariablesQuery);\n  dbReq.end();\n\n  https.get(\n    endpoints.twitter,\n    {\n      headers: { Authorization: `Bearer ${credentials.twitter.bearerToken}` },\n    },\n    (twitterRes) => {\n      let body = \"\";\n      twitterRes.on(\"data\", (chunk) => (body += chunk));\n      twitterRes.on(\"end\", () => {\n        tweets = JSON.parse(body).data;\n        respondToTweets(tweets, persistentVariables);\n      });\n    }\n  );\n};\n"]},"metadata":{},"sourceType":"module"}