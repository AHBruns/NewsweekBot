{"ast":null,"code":"import { credentials } from \"lib/constants\";\nimport Twit from \"twit\";\nexport default ((req, res) => {\n  res.send(\"ACK\");\n  const T = new Twit({\n    consumer_key: credentials.twitter.apiKey,\n    consumer_secret: credentials.twitter.apiSecret,\n    access_token: credentials.twitter.accessToken,\n    access_token_secret: credentials.twitter.accessTokenSecret,\n    timeout_ms: 10000,\n    strictSSL: true\n  });\n  const stream = T.stream(\"statuses/filter\", {\n    track: [\"newsweek\"]\n  });\n  setTimeout(() => stream.stop(), 15000);\n  stream.on(\"tweet\", function (tweet) {\n    console.log(tweet);\n  }); //   T.post(\"statuses/update\", { status: \"42\" }, function (_, data) {\n  //     console.log(data);\n  //   });\n}); // function respondToTweet(id) {\n//   https.request(\n//     endpoints.twitter.replyToTweet(id),\n//     {\n//       headers: { Authorization: `Bearer ${credentials.twitter.bearerToken}` },\n//       method: \"POST\",\n//     },\n//     (twitterRes) => {\n//       let body = \"\";\n//       twitterRes.on(\"data\", (chunk) => (body += chunk));\n//       twitterRes.on(\"end\", () => {\n//         console.log(JSON.parse(body));\n//       });\n//       //   twitterRes.on(\"error\", (err) => console.error(err));\n//     }\n//   );\n// }\n// function respondToTweets(\n//   tweets: { id: string; text: string; created_at: string }[],\n//   persistentVariables: { key: string; value: string }[],\n//   res: NextApiResponse\n// ) {\n//   if (tweets === undefined || persistentVariables === undefined) return;\n//   const minimumAge = new Date(\n//     persistentVariables.filter(\n//       ({ key }) => key === \"TIME_OF_LAST_ACTION_TAKEN\"\n//     )[0].value\n//   );\n//   let newMinimumAge = minimumAge;\n//   tweets\n//     .map((tweet) => ({ ...tweet, created_at: new Date(tweet.created_at) }))\n//     .forEach((tweet) => {\n//       if (tweet.created_at > minimumAge) {\n//         respondToTweet(tweet.id);\n//         if (tweet.created_at > newMinimumAge) newMinimumAge = tweet.created_at;\n//       }\n//     });\n//   if (newMinimumAge != minimumAge) {\n//     let dbReq = https.request(\n//       endpoints.db,\n//       {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           \"Content-Length\": Buffer.byteLength(\n//             dbQueries.setTimeOfLastActionTaken(newMinimumAge.toString())\n//           ),\n//         },\n//         method: \"POST\",\n//       },\n//       (dbRes) => {\n//         let body = \"\";\n//         dbRes.on(\"data\", (chunk) => (body += chunk));\n//         dbRes.on(\"end\", () => {\n//           res.json({ all: \"good\" }); // done\n//         });\n//       }\n//     );\n//     dbReq.write(dbQueries.setTimeOfLastActionTaken(newMinimumAge.toString()));\n//     dbReq.end();\n//   } else res.json({ all: \"good\" }); // done\n// }\n// export default (req: NextApiRequest, res: NextApiResponse) => {\n//   let persistentVariables = undefined;\n//   let tweets = undefined;\n//   let dbReq = https.request(\n//     endpoints.db,\n//     {\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Content-Length\": Buffer.byteLength(\n//           dbQueries.getPeristentVariablesQuery\n//         ),\n//       },\n//       method: \"POST\",\n//     },\n//     (dbRes) => {\n//       let body = \"\";\n//       dbRes.on(\"data\", (chunk) => (body += chunk));\n//       dbRes.on(\"end\", () => {\n//         persistentVariables = JSON.parse(body).data.newsweek_bot_constants;\n//         respondToTweets(tweets, persistentVariables, res);\n//       });\n//     }\n//   );\n//   dbReq.write(dbQueries.getPeristentVariablesQuery);\n//   dbReq.end();\n//   https.get(\n//     endpoints.twitter.getTweets,\n//     {\n//       headers: { Authorization: `Bearer ${credentials.twitter.bearerToken}` },\n//     },\n//     (twitterRes) => {\n//       let body = \"\";\n//       twitterRes.on(\"data\", (chunk) => (body += chunk));\n//       twitterRes.on(\"end\", () => {\n//         tweets = JSON.parse(body).data;\n//         respondToTweets(tweets, persistentVariables, res);\n//       });\n//     }\n//   );\n// };","map":{"version":3,"sources":["/Users/ahb/code/newsweek-twitter-bot/pages/api/index.ts"],"names":["credentials","Twit","req","res","send","T","consumer_key","twitter","apiKey","consumer_secret","apiSecret","access_token","accessToken","access_token_secret","accessTokenSecret","timeout_ms","strictSSL","stream","track","setTimeout","stop","on","tweet","console","log"],"mappings":"AACA,SAASA,WAAT,QAA4B,eAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,gBAAe,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC5DA,EAAAA,GAAG,CAACC,IAAJ,CAAS,KAAT;AAEA,QAAMC,CAAC,GAAG,IAAIJ,IAAJ,CAAS;AACjBK,IAAAA,YAAY,EAAEN,WAAW,CAACO,OAAZ,CAAoBC,MADjB;AAEjBC,IAAAA,eAAe,EAAET,WAAW,CAACO,OAAZ,CAAoBG,SAFpB;AAGjBC,IAAAA,YAAY,EAAEX,WAAW,CAACO,OAAZ,CAAoBK,WAHjB;AAIjBC,IAAAA,mBAAmB,EAAEb,WAAW,CAACO,OAAZ,CAAoBO,iBAJxB;AAKjBC,IAAAA,UAAU,EAAE,KALK;AAMjBC,IAAAA,SAAS,EAAE;AANM,GAAT,CAAV;AASA,QAAMC,MAAM,GAAGZ,CAAC,CAACY,MAAF,CAAS,iBAAT,EAA4B;AAAEC,IAAAA,KAAK,EAAE,CAAC,UAAD;AAAT,GAA5B,CAAf;AACAC,EAAAA,UAAU,CAAC,MAAMF,MAAM,CAACG,IAAP,EAAP,EAAsB,KAAtB,CAAV;AACAH,EAAAA,MAAM,CAACI,EAAP,CAAU,OAAV,EAAmB,UAAUC,KAAV,EAAiB;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,GAFD,EAd4D,CAkB5D;AACA;AACA;AACD,CArBD,E,CAusourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport { credentials } from \"lib/constants\";\nimport Twit from \"twit\";\n\nexport default (req: NextApiRequest, res: NextApiResponse) => {\n  res.send(\"ACK\");\n\n  const T = new Twit({\n    consumer_key: credentials.twitter.apiKey,\n    consumer_secret: credentials.twitter.apiSecret,\n    access_token: credentials.twitter.accessToken,\n    access_token_secret: credentials.twitter.accessTokenSecret,\n    timeout_ms: 10000,\n    strictSSL: true,\n  });\n\n  const stream = T.stream(\"statuses/filter\", { track: [\"newsweek\"] });\n  setTimeout(() => stream.stop(), 15000);\n  stream.on(\"tweet\", function (tweet) {\n    console.log(tweet);\n  });\n\n  //   T.post(\"statuses/update\", { status: \"42\" }, function (_, data) {\n  //     console.log(data);\n  //   });\n};\n\n// function respondToTweet(id) {\n//   https.request(\n//     endpoints.twitter.replyToTweet(id),\n//     {\n//       headers: { Authorization: `Bearer ${credentials.twitter.bearerToken}` },\n//       method: \"POST\",\n//     },\n//     (twitterRes) => {\n//       let body = \"\";\n//       twitterRes.on(\"data\", (chunk) => (body += chunk));\n//       twitterRes.on(\"end\", () => {\n//         console.log(JSON.parse(body));\n//       });\n//       //   twitterRes.on(\"error\", (err) => console.error(err));\n//     }\n//   );\n// }\n\n// function respondToTweets(\n//   tweets: { id: string; text: string; created_at: string }[],\n//   persistentVariables: { key: string; value: string }[],\n//   res: NextApiResponse\n// ) {\n//   if (tweets === undefined || persistentVariables === undefined) return;\n\n//   const minimumAge = new Date(\n//     persistentVariables.filter(\n//       ({ key }) => key === \"TIME_OF_LAST_ACTION_TAKEN\"\n//     )[0].value\n//   );\n\n//   let newMinimumAge = minimumAge;\n\n//   tweets\n//     .map((tweet) => ({ ...tweet, created_at: new Date(tweet.created_at) }))\n//     .forEach((tweet) => {\n//       if (tweet.created_at > minimumAge) {\n//         respondToTweet(tweet.id);\n//         if (tweet.created_at > newMinimumAge) newMinimumAge = tweet.created_at;\n//       }\n//     });\n\n//   if (newMinimumAge != minimumAge) {\n//     let dbReq = https.request(\n//       endpoints.db,\n//       {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           \"Content-Length\": Buffer.byteLength(\n//             dbQueries.setTimeOfLastActionTaken(newMinimumAge.toString())\n//           ),\n//         },\n//         method: \"POST\",\n//       },\n//       (dbRes) => {\n//         let body = \"\";\n//         dbRes.on(\"data\", (chunk) => (body += chunk));\n//         dbRes.on(\"end\", () => {\n//           res.json({ all: \"good\" }); // done\n//         });\n//       }\n//     );\n//     dbReq.write(dbQueries.setTimeOfLastActionTaken(newMinimumAge.toString()));\n//     dbReq.end();\n//   } else res.json({ all: \"good\" }); // done\n// }\n\n// export default (req: NextApiRequest, res: NextApiResponse) => {\n//   let persistentVariables = undefined;\n//   let tweets = undefined;\n\n//   let dbReq = https.request(\n//     endpoints.db,\n//     {\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Content-Length\": Buffer.byteLength(\n//           dbQueries.getPeristentVariablesQuery\n//         ),\n//       },\n//       method: \"POST\",\n//     },\n//     (dbRes) => {\n//       let body = \"\";\n//       dbRes.on(\"data\", (chunk) => (body += chunk));\n//       dbRes.on(\"end\", () => {\n//         persistentVariables = JSON.parse(body).data.newsweek_bot_constants;\n//         respondToTweets(tweets, persistentVariables, res);\n//       });\n//     }\n//   );\n//   dbReq.write(dbQueries.getPeristentVariablesQuery);\n//   dbReq.end();\n\n//   https.get(\n//     endpoints.twitter.getTweets,\n//     {\n//       headers: { Authorization: `Bearer ${credentials.twitter.bearerToken}` },\n//     },\n//     (twitterRes) => {\n//       let body = \"\";\n//       twitterRes.on(\"data\", (chunk) => (body += chunk));\n//       twitterRes.on(\"end\", () => {\n//         tweets = JSON.parse(body).data;\n//         respondToTweets(tweets, persistentVariables, res);\n//       });\n//     }\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}